#!/usr/bin/env sh
# Copyright (c) 2023 Sebastian Gniazdowski
#
# NC next-gen file-manager
#

#
# /bin/sh stage, load configuration to obtain $ZSH_CONTROL_BIN
#

ZERO="${0##$PWD}"
[ -z "$APPDIR" ] && APPDIR=$PWD/${ZERO%/*}
APPCFG="$APPDIR/share/n-c.cfg"

[ -f "$APPCFG" ] && . "$APPCFG"

[ -z "$ZSH_CONTROL_BIN" ] && ZSH_CONTROL_BIN="zsh"

if [ -z "$ZSH_VERSION" ]; then
  args="\"$0\""
  for arg; do
    args="$args \"$arg\""
  done
  {
    printf %s\\n "Restarting with $ZSH_CONTROL_BIN"|tee -a "$APPDIR/io.log"
  } 2>/dev/null
  builtin exec /usr/bin/env "${ZSH_CONTROL_BIN}" -f -c "source ${args}"
fi

n-c() {
    # ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
    # The only place where code repetition occurs
    # ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓

    # Set options
    builtin emulate -L zsh -o extendedglob -o noshortloops \
                            -o warncreateglobal -o typesetsilent \
                            -o nopromptsubst -o rcquotes

    # Run as script?
    integer QBESCRIPT=${${${(M)0:#$ZSH_ARGZERO:t}:+1}:-0};

    # Set $0 with a new trik - use of %x prompt expansion
    0=${${${(M)${0::=${(%):-%x}}:#/*}:-$PWD/$0}:A}
    source $0:h:h/share/preamble.inc.zsh --fun

    # ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑
    # End of code repetition
    # ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑

    integer EC
    local -A Opts; local -a opts
    {
    int/nc::parse-opts "t: -timeout: z -zsh C: -dir: c -c v -verbose V -vim \
                         o: 1 e n p q -quiet E O -ed s h -help m -msg \
                         -auto -move -move2 -prune -bkp \
                            T -cat -1space i -zle-nt \
                            R -reverse r: x: -ifile:" \
                            Opts opts "$@"||THROW incorrect options given
    } always {
        CATCH \*&&{iqerr $CAUGHT;return 76;}
    }
    set -- "$reply[@]"
    local CMD=$1
    if (($+Opts[-h]||$+Opts[--help]));then
        CMD=help
    else
        (($#&&$#CMD))&&shift
    fi
    if [[ ! -s $NCDIR/libexec/$CMD || -z $CMD ]];then
        set -- nc $CMD "$@";CMD=console
    fi
    if [[ -s $NCDIR/libexec/$CMD ]];then
        local FBKP=$functions[$CMD]
        builtin unset -f $CMD&>>!$NCNUL
        builtin autoload -z $NCDIR/libexec/$CMD #zsweep:pass

        # Edit source?
        if (($+Opts[--ed]));then
            int/nc::get-editor||return 1
            if eval "type $REPLY $NC[NCIO]";then
                $REPLY $^fpath/$CMD(N.)
            else
                iqerr couldn\'t find editor, please set {var}\$EDITOR
            fi
        # … or run?
        else
            $CMD "${opts[@]:#(--help|-h)}" "$@"
        fi
        EC+=$?

        [[ -n $FBKP ]]&&functions[$CMD]=$FBKP||builtin unfunction $CMD&>>|$NCNUL
    else
        iqmsgi $0:t\:$LINENO {err}Error:{txt} \
            no such subcommand %B{quot}·{cmd}${(U)CMD}{%}%B{quot}·{%},\
                exiting doing nothing…
        EC+=3
    fi

    return EC
}

# To support autoloading the script as a function
n-c "$@"
