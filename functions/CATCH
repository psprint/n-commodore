#!/usr/bin/env zsh
# Catch an exception.  Returns 0 if the exception in question was caught.
# The first argument gives the exception to CATCH, which may be a
# pattern.
# This must be within an always-block.  A typical set of handlers looks
# like:
#   {
#     # try block; something here throws exceptions
#   } always {
#      if CATCH MyExcept; then
#         # Handler code goes here.
#         print Handling exception MyExcept
#      elif CATCH *; then
#         # This is the way to implement a CATCH-all.
#         print Handling any other exception
#      fi
#   }
# As with other languages, exceptions do not need to be handled
# within an always block and may propagate to a handler further up the
# call chain.
#
# It is possible to THROW an exception from within the handler by
# using "THROW".
#
# The shell variable $CAUGHT is set to the last exception caught,
# which is useful if the argument to "CATCH" was a pattern.
#
# Use "function" keyword in case CATCH is already an alias.
CATCH() {
    emulate -L zsh -o extendedglob
    integer QF=1 QR
    local QC
    # if should continue outside always block?
    [[ $1 == -c ]]&&QF=0
    # if should return from always block immediately when caught?
    [[ $1 == (#b)-r(1|0|) ]]&&\
            {QF=0;QR=1;QC=${match[1]:-1};}
    # remove any option
    [[ $1 == -* ]]&&shift
    # $2 is any code to evaluate?
    local PAT=$1 CODE=${(j[ ])@[2,-1]}

    if [[ $TRY_BLOCK_ERROR -gt 0 && $EXCEPTION == $~PAT ]]; then
        ((TRY_BLOCK_ERROR=QF))
        typeset -ag CAUGHT=("$EXCEPTION[@]")
        unset EXCEPTION
        if ((QR));then
            builtin trap "eval ${(q)CODE};return $QC" EXIT
        fi
        if ((!QR&&$#CODE));then
            builtin eval "$CODE"
        fi
        return 0
    fi
    return 1
}
