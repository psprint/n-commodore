#!/usr/bin/env zsh
# -*- mode: sh; sh-indentation: 4; indent-tabs-mode: nil; sh-basic-offset: 4; -*-

# Copyright (c) 2023 Sebastian Gniazdowski

# Run as script? Or as a function? Supports both ways.

iqopen()
{
# Preamble – emulate & 0=…
    0=${${${(M)${0::=${(%):-%x}}:#/*}:-$PWD/$0}:A}

source $0:h:h/share/preamble.inc.zsh --script --fun

local -A Opts;local -a opts
int/nc::init-sm-con Opts opts "$@"||{print QE>>/tmp/reply;return 13}
set -- "$reply[@]"
eval "$REPLY"

iqw(){
    -zui_glib_msg "$@"
}

iqopen_util_swap4(){
    local Q=$1 Q0=$2
    shift 0+2
    local -a vars=("$@")

    : ${(P)vars[Q0+1]::=${(P)vars[4]}}
    : ${(P)vars[4]::=${(P)vars[Q+1]}}
}

iqopen_util_set_current_idx(){
    integer IN=ZUI[PREV_CURRENT_IDX]
    local QPATH=${ZUI[QPATH]:+_$ZUI[QPATH]}
    # Tree
    if ((ZUI[GEN_B_IDX]==0));then
       [[ $ZUI[PREV_CURRENT_IDX] -eq $ZUI[CURRENT_IDX_PVIEW_BKP$QPATH] ||\
         $ZUI[PREV_CURRENT_IDX] -eq $ZUI[CURRENT_IDX_GIT_BKP] ]]&&\
            ZUI[PREV_CURRENT_IDX]=${ZUI[CURRENT_IDX_MAIN_BKP]:-5}
    # Preview
    elif ((ZUI[GEN_B_IDX]==1));then
        [[ $ZUI[PREV_CURRENT_IDX] -eq $ZUI[CURRENT_IDX_MAIN_BKP] ||\
          $ZUI[PREV_CURRENT_IDX] -eq $ZUI[CURRENT_IDX_GIT_BKP] ]]&&\
            ZUI[PREV_CURRENT_IDX]=${${ZUI[CURRENT_IDX_PVIEW_BKP$QPATH]:#0#}:-5}
    elif ((ZUI[GEN_B_IDX]==0+2));then
        [[ $ZUI[PREV_CURRENT_IDX] -eq $ZUI[CURRENT_IDX_PVIEW_BKP$QPATH] ||\
          $ZUI[PREV_CURRENT_IDX] -eq $ZUI[CURRENT_IDX_MAIN_BKP] ]]&&\
            ZUI[PREV_CURRENT_IDX]=${${ZUI[CURRENT_IDX_GIT_BKP]:#0#}:-5}
    fi
    if ((IN!=ZUI[PREV_CURRENT_IDX]));then
        ZUI[CURRENT_IDX]=$ZUI[PREV_CURRENT_IDX]
        -zui_list_verify_vars
        ZUI[redraw]=1
    fi
    if ((!ZUI[UNIQ_MODE]&&!$#ZUI[SEARCH_BUFFER]&&\
            ZUI[CURRENT_IDX]<=${${(On)ZUILIST_NONSELECTABLE_ELEMENTS}[1]}));then
        ZUI[CURRENT_IDX]=${${(On)ZUILIST_NONSELECTABLE_ELEMENTS}[1]}
        ZUI[redraw]=1
    fi
}

iqopen_cmd_synh_switch(){
    ((ZUI[SRC_HIGHLIGHT]=1-ZUI[SRC_HIGHLIGHT]))
    ZUI[SRC_HIGHLIGHT_SWITCHED]=1
    if iqopen_hub;then
        ((ZUI[SRC_HIGHLIGHT]))&&local txt=" ON"||local txt=" OFF"
        iqw "Syntax highlighting switched" $txt
    fi
}

iqopen_cmd_next(){
    integer q=${1##<->/} qq=${1%%/<->} in=$ZUI[GEN_B_IDX]

    # Three kind of args, first: num0/num1
    if ((q!=qq));then
        ((ZUI[GEN_B_IDX]==q))&&ZUI[GEN_B_IDX]=$qq||\
            {((ZUI[GEN_B_IDX]==qq))&&ZUI[GEN_B_IDX]=$q||ZUI[GEN_B_IDX]=0;}
    # Second: num
    elif (($#1));then
        ZUI[GEN_B_IDX]=$q
    # Third: no-arg
    else
        ((ZUI[GEN_B_IDX]=(1+ZUI[GEN_B_IDX])%3))
    fi
    iqopen_view_switch $in $ZUI[GEN_B_IDX]
    iqopen_hub
}

iqopen_view_switch(){
    integer in=$2 in0=$1
    ZUI[VIEW_CHANGE]=1
    local QPATH=${ZUI[QPATH]:+_$ZUI[QPATH]} QTXT

    noglob iqopen_util_swap4 $in $in0 \
        ZUI[SEARCH_BUFFER_GLOBAL] \
        ZUI[SEARCH_BUFFER_PREVIEW]\
        ZUI[SEARCH_BUFFER_GIT]\
        ZUI[SEARCH_BUFFER]

    local -a qt=(·file·\  ·preview·\  ·git·\ )
    local Q=$qt[ZUI[GEN_B_IDX]+1]
    ((ZUI[IN_QUERY]))&&iqw "[${(U)Q%%[ ]##}] " "Restored previous " $Q search

    buffer=$ZUI[SEARCH_BUFFER]
    if ((in0==1));then
        ZUI[CURRENT_IDX_PVIEW_BKP$QPATH]=$ZUI[CURRENT_IDX]
    elif ((in0==2));then
        ZUI[CURRENT_IDX_GIT_BKP]=$ZUI[CURRENT_IDX]
    elif ((in0==0));then
        ZUI[CURRENT_IDX_MAIN_BKP]=$ZUI[CURRENT_IDX]
    fi
    ZUI[PREV_CURRENT_IDX]=$ZUI[CURRENT_IDX]
}

iqopen_stage_line(){
    integer QI QCNT=$#__qlist QIDX QOFF1 QOFF0 QLINE
    local LINE FIRSTC
    ok/qlocal
    local reply=() REPLY
    {
        zui::get_diff_line "$__qlist[@]"||\
            THROW "Internal error, cannot stage"
        QIDX=$reply[1] QFILE=$reply[2]
    } always {
        CATCH *&&iqw $CAUGHT
    }

    repeat 1;do typeset +U -ag __slist=("$__qlist[@]");done
    -zui_sys_get_match_line QLINE
    (($#ZUI[SEARCH_BUFFER]))&&QLINE+=$#ZUILIST_NONSELECTABLE_ELEMENTS

    for ((QI=QLINE-1;QI>0;QI--));do
        int/nc::prune-esc -T -- $__qlist[QI]
        [[ $REPLY[1] != [+] ]]&&\
                QOFF0+=-QLINE+QI&&break
        [[ $REPLY[1] == [-] ]]&&\
                QOFF0+=1
    done

    for ((QI=QLINE+1;QI<=QCNT;QI++));do
        int/nc::prune-esc -T -- $__qlist[QI]
        [[ $REPLY[1] != [+] ]]&&\
                QOFF1+=-QLINE+QI&&break
        [[ $REPLY[1] == [-] ]]&&\
                QOFF1=QOFF1-1
    done
    ((QOFF0&&QOFF1))||{iqw "Problems gathering lines, cannot stage"
                        return 3;}
    LINE=$__qlist[QLINE]
    int/nc::prune-esc -T -- $LINE

    FIRSTC=$REPLY[1] LINE=$REPLY
    [[ $FIRSTC == [+-] ]]||return 1
    integer QLEFT=${${${(M)FIRSTC:#-}:+1}:-0} QRIGHT=${${${(M)FIRSTC:#+}:+1}:-0}
    local LEFT=$((QIDX-1))${${:-,$((QLEFT?3:2))}:#,0} \
            RIGHT=$((QIDX-1))${${:-,$((QRIGHT?3:2))}:#,0}
    local PATCH=$(mktemp) ALINE ULINE
    int/nc::prune-esc -T -v ALINE -- $__qlist[QLINE+QOFF0]
    int/nc::prune-esc -T -v ULINE -- $__qlist[QLINE+QOFF1]
    ALINE[1]=" " ULINE[1]=" "
    cat >|$PATCH >>/tmp/reply <<END
diff --git a/$QFILE b/$QFILE
--- a/$QFILE
+++ b/$QFILE
@@ -$LEFT +$RIGHT @@ dummy text
$ALINE
$LINE
$ULINE
END
    command git apply --ignore-whitespace --cached --recount&>>!$NCNUL -- $PATCH
    if (($?));then
        iqw "Stage of " "1-line no. " $QIDX " ✗ FAILED"
    else
        iqw "Stage of " "1-line no. " $QIDX " ✓ correct"
    fi
    iqopen_hub
    command rm -f "$PATCH"
}

iqopen_exec_cmd(){
    ((ZUI[IN_QUERY]!=3))&&ZUI[IN_QUERY]=3||ZUI[IN_QUERY]=0
    ZUI[QUERY_PROMPT]="Enter command to execute: "
    in_query=$ZUI[IN_QUERY]

    integer vis
    ((in_query))&&vis=1
    -zui_list_cursor_visibility status $vis
}

iqopen_exec_command_cb() {
    ZUI[COMMAND]=$ZUI[QUERY_BUFFER]
    if [[ $ZUI[COMMAND] != $~NC[WRONGSTR] ]];then
        builtin print $ZUI[COMMAND]>>!$NCCHIST
    else
        iqw "No command entered, " "" "" "cannot execute"
        return 1
    fi
    ZUI[QUERY_BUFFER]=
    iqopen_hub

}
iqopen_create_histories(){
    : ${NCCHIST:=${XDG_CACHE HOME:-$HOME/.cache/n-commodore}/n-commmodore-cmd.hst}
    : ${NCSHIST:=${XDG_CACHE HOME:-$HOME/.cache/n-commodore}/n-commmodore-srch.hst}
    command mkdir -p $NCCHIST:h $NCSHIST:h||return
    [[ ! -f $NCCHIST ]]&&builtin print -n>!$NCCHIST
    [[ ! -f $NCSHIST ]]&&builtin print -n>!$NCSHIST
    return 0
}

iqopen_hist(){
    local TPE=$1 QDIR=$2 FILE
    iqopen_create_histories||{iqw "File error, no history…";return 1;}
    [[ $TPE == CMD ]]&&FILE=$NCCHIST||FILE=$NCSHIST
    local -a h=("${(@f)$(<$FILE)}")
    ((!$#h))&&{iqw "Command history empty, no change done";return 0;}
    : ${ZUI[${TPE}_NO]:=$#h}
    if ((QDIR));then
        ((++ZUI[${TPE}_NO],ZUI[${TPE}_NO]>$#h+1?(ZUI[${TPE}_NO]=$#h+1):1))
    else
        ((--ZUI[${TPE}_NO],ZUI[${TPE}_NO]<0?(ZUI[${TPE}_NO]=0):1))
    fi
    local ITEM=$h[ZUI[${TPE}_NO]]
    if ((ZUI[${TPE}_NO]<1||ZUI[${TPE}_NO]>$#h));then
        ITEM=
        local D=top
        ((QDIR))&&D=bottom
        iqw "At $D of history"
    else
        [[ $ITEM == $~NC[WRONGSTR] && $ZUI[${TPE}_NO] -ne 1 ]]&&\
            {iqw "Problem with history occurred…";return 1;}
    fi
    ZUI[QUERY_BUFFER]=$ITEM buffer=$ITEM
}

iqopen_hist_top(){
    local T D=$1
    if ((ZUI[IN_QUERY]==1));then
        T=SEARCH
    elif ((ZUI[IN_QUERY]==3));then
        T=CMD
    fi
    (($#T))&&iqopen_hist $T $D
}

separ() {
    REPLY="$ZUI[YELLOW]${(l:COLUMNS*3::—:):-}$ZUI[FMT_END]";
}

if ((!$+Opts[--refresh])); then
    ok/qnstr $PWD&&local APP=$REPLY
    ZUI[SRC_HIGHLIGHT]=1
    -zui_glib_cleanup deserialize:"iqopen_$APP"
    -zui_glib_init app:"iqopen_$APP" app_name:"°Open° Console"
    emulate -L zsh -o extendedglob -o typesetsilent -o warncreateglobal -o combiningchars -o rcquotes
    -zui_glib_init2 # after emulate
    ZUI[GEN_B_IDX]=0 ZUI[GIT_DIFF]=0

    ZUI[SPECIAL_COMMAND_CALLBACK]=iqopen_exec_command_cb
    # Needed for immediate output from coprocesses (disables buffering).
    ((${+commands[stdbuf]}))&& \
        local -a stdbuf1=( stdbuf -o0 -i0 ) stdbuf2=( stdbuf -o0 -i0 )
    ((${+commands[gstdbuf]}))&& \
        local -a stdbuf1=( gstdbuf -o0 -i0 ) stdbuf2=( gstdbuf -o0 -i0 )

    ZUI[COLORING_MATCH_MULTIPLE]=1
    ZUI[COLORING_COLOR]=$ZUI[BOLD]$ZUI[YELLOW]

    -zui_glib_store_default_app_config b:instant_search 1
    -zui_glib_store_default_app_config s:select_mode "quit"   # Quit event loop on text-selection
    -zui_glib_store_default_app_config b:text_bar "[F1 jump/res.][F2 view][F3 diff][F4 Tig][F5 commit][F6 push][F7 pull][F8 SynH]"
    -zui_glib_store_default_app_config b:status_size 6
    -zui_glib_store_default_app_config b:status_pointer 1
    -zui_glib_store_default_app_config b:text_select 1        # Allow selection of text
    -zui_glib_store_default_app_config s:timeout 25
    -zui_glib_store_default_app_config s:mark "white MAGENTA reverse"
    -zui_glib_store_default_app_config s:text_mode off
    -zui_glib_store_default_app_config b:top_anchors 0
    ZUI[UNIQ_MODE]=0
    [[ $1 == open ]]&&shift
    [[ -n $* ]]&&ZUI[SEARCH_BUFFER]=$*
    ZUI[START_IN_QUERY]=1

    local -a qitems iq0items q0input q0inputp
    integer Q0_SAVE_PIPE
    if read -k -t -u0; then
        ZUI[FIRST_0_INPUT]=$REPLY
        ZUI[HAVE_0_INPUT]=1
        ZUI[GEN_B_IDX]=0
        exec {Q0_SAVE_PIPE}<&0
    fi
fi

cmd-ret(){print Press enter to continue…; read -k1;}
cmd-synh-switch(){iqopen_cmd_synh_switch;}
cmd-toggle-view(){[[ $1 == view ]]&&local Q=1||local Q=0/1;iqopen_cmd_next $Q;}
cmd-open-diff-view(){iqopen_cmd_next 2;}
cmd-open-tig(){zcurses end;command tig "$@";-zui_glib_refresh;}
cmd-commit(){zcurses end;command git commit -v "$@";cmd-ret;-zui_glib_refresh;}
cmd-push(){zcurses end;command git push "$@";cmd-ret;-zui_glib_refresh;}
cmd-pull(){zcurses end;command git pull "$@";cmd-ret;-zui_glib_refresh;}
cmd-stage-line(){iqopen_stage_line;}
cmd-exec-command(){iqopen_exec_cmd;}
cmd-exec-prev-hist(){iqopen_hist CMD 0;}
cmd-exec-next-hist(){iqopen_hist CMD 1;}
cmd-search-next-hist(){iqopen_hist SEARCH 1;}
cmd-search-prev-hist(){iqopen_hist SEARCH 0;}
cmd-next-hist(){iqopen_hist_top 1;}
cmd-prev-hist(){iqopen_hist_top 0;}

# Load configuration
builtin source -- $NCOCFG

#    zui::bindkey F3 "{print q:$ZUI[mark]}"
zui::bindkey F9 '{print \\nquery:$ZUI[IN_QUERY], qbuf: $ZUI[QUERY_BUFFER], view:$ZUI[SEARCH_BUFFER_PREVIEW], gl:$ZUI[SEARCH_BUFFER_GLOBAL], sbuff:$ZUI[SEARCH_BUFFER], current:$ZUI[CURRENT_IDX], PVIEW_Q:$ZUI[CURRENT_IDX_PVIEW_BKP_$ZUI[QPATH]], PVIEW:$ZUI[CURRENT_IDX_PVIEW_BKP], main:$ZUI[CURRENT_IDX_MAIN_BKP] sptr:$ZUI[status_pointer]|tee -a /tmp/reply;}'
zui::bindkey F10 '{builtin source $NC_CON_DIR/iqopen --refresh||\
                    iqw -r "Reload finished with error: " $?;}'

iqopen_hub(){
    integer EC
    local -a gener=(iqopen_fill_view_tree iqopen_fill_view_preview iqopen_fill_or_set_view_git)
    $gener[1+(ZUI[GEN_B_IDX]%3)]
    EC=$?
    ((${3:-0}))||{-zui_glib_fly_array_refresh 1;}

    return EC
}

iqopen_fill_view_preview(){
    local QPATH QTXT
    ZUI[COLORING_PATTERN]="·[^·]##·"
    ZUI[COLORING_MATCH_MULTIPLE]=1
    ZUI[COLORING_COLOR]=$ZUI[BOLD]$ZUI[YELLOW]
    if ((ZUI[CURRENT_IDX]>0&&ZUI[SRC_HIGHLIGHT_SWITCHED]==0&&ZUI[GEN_B_IDX]==1));then
        QPATH=$__list[ZUI[CURRENT_IDX]]
        ZUI[QPATH]=$QPATH
    else
        QPATH=$ZUI[QPATH]
    fi
    {
        qitems=() iq0items=()
        if [[ -f $QPATH ]];then
            QTXT="Contents of file: ·$QPATH·"\
" located at: ·${${${(M)QPATH##/*}:+$QPATH:h}:-$PWD}/·"
            ((ZUI[SRC_HIGHLIGHT]))||return 0
            int/nc::get-file-type -s -q $QPATH||\
                THROW  "Unknown file type, no syntax highlighting"
            int/nc::get-stx-cmd -q $REPLY||\
                THROW "Error: no highlighter command found (bat, {src-,}highlight)"
            local -a qcmd=("$reply[@]" "$QPATH")
            iq0items=("${(@f)$($qcmd[@])}")
        else
            QTXT="!NO FILE SELECTED, PRESS F2 TO SHOW FILE TREE!"
        fi
    } always {
        if CATCH -c \* || [[ $iq0items == $~NC[WRONGSTR] ]];then
            [[ -n $CAUGHT ]]&&{iqw $CAUGHT;CAUGHT=;}
            [[ -f $QPATH ]]&&iq0items=("${(@f)$(<$QPATH)}")
        fi
        if [[ $iq0items != $~NC[WRONGSTR] ]];then
            qitems=("$iq0items[@]")
        else
            qitems=("No such file")
        fi

        reply=()
        -zui_glib_special_text $QTXT
        separ
        typeset -ga -U ZUILIST_NONSELECTABLE_ELEMENTS=(4 3 2 1)
        qitems=("$REPLY" "$reply[1]" "$REPLY" "$qitems[@]")
    }
}

iqopen_fill_view_tree(){
    ZUI[COLORING_PATTERN]="(((([^\/—\]\[[:space:]])(#c2,))~^(*(#e)))|·[^·]##·)"
    ZUI[COLORING_MATCH_MULTIPLE]=1
    ZUI[COLORING_COLOR]=$ZUI[BOLD]$ZUI[YELLOW]
    ZUI[QIDX]=0 ZUI[SRC_HIGHLIGHT_SWITCHED]=0
    reply=()
    if [[ -n ${ZUI[COMMAND]:=$ANGEL_OPEN_DEFAULT_COMMAND} ]];then
        ZUI[COMMAND_PREV]=$ZUI[COMMAND]
        -zui_glib_special_text "Output of cmd: ·$ZUI[COMMAND]·"
        iq0items=("${(@f)$(eval $=ZUI[COMMAND])}")
        ZUI[redraw]=1
        unset 'ZUI[COMMAND]'
    else
        -zui_glib_special_text "Showing files in: ·$PWD·"
        iq0items=(**/*~*~(N.,@))
    fi
    (($+Opts[-s]))&&qitems=("${(@on)qitems}")
    (($+Opts[-R]))&&qitems=("${(a@nO)qitems}")

    typeset -ga -U ZUILIST_NONSELECTABLE_ELEMENTS=(4 3 2 1)
    separ
    qitems=("$REPLY" "$reply[1]" "$REPLY" "$iq0items[@]")

    ((!ZUI[GIT_DIFF]))&&[[ -n ${(M)qitems[1,15]:#*diff[[:space:]]##--git*} ]]&&iqopen_fill_or_set_view_git 1
}

iqopen_fill_or_set_view_git(){
    local col=$ZUI[WHITE]
    ZUI[COLORING_PATTERN]="(#s)[^+-]*" ZUI[COLORING_COLOR]=$col
    ZUI[COLORING_MATCH_MULTIPLE]=1
    ((!ZUI[GIT_DIFF]))&&iqw "Git diff input," " Shift-F3" \
        " stages selected " "1-line"
    (($1))&&ZUI[GEN_B_IDX]=2
    ZUI[GIT_DIFF]=1

    if ((!ZUI[HAVE_0_INPUT]));then
        iq0items=("${(@f)$(command git diff --color=always)}")
        local -a qreply=()
        foreach QE ("$iq0items[@]")
            int/nc::prune-esc -T -b -- $QE
            qreply+=("$REPLY")
        end
        iq0items=("$qreply[@]")
    fi
    typeset -ga -U ZUILIST_NONSELECTABLE_ELEMENTS=(4 3 2 1)
    separ
    reply=()
    -zui_glib_special_text "Git diff output"
     qitems=("$REPLY" "$reply[1]" "$REPLY" "$iq0items[@]")
}

# Read & publish Configure/make output
-zui-standard-timeout-callback(){
    typeset -ga -U ZUILIST_NONSELECTABLE_ELEMENTS=(4 3 2 1)
    ((!ZUI[HAVE_0_INPUT]&&!ZUI[VIEW_CHANGE]))&&return

    if ((ZUI[HAVE_0_INPUT]));then
        int/nc::read-all -u$Q0_SAVE_PIPE -t0 -x100
        local ql had_read=0
        integer q0idx=$#q0input+1
        if ((!$#q0input));then
            q0input[q0idx]=$ZUI[FIRST_0_INPUT]$reply[1]
            shift reply
        fi
        local -a qreply=()
        foreach QE ("$reply[@]")
            int/nc::prune-esc -T -b -- $QE
            qreply+=("$REPLY")
        end
        q0input+=("$qreply[@]")
        q0inputp=("$q0input[@]")
        (($+Opts[-s]))&&q0inputp=("${(@on)q0inputp}")
        (($+Opts[-R]))&&q0inputp=("${(a@nO)q0inputp}")
        if ((ZUI[GEN_B_IDX]%3==0||ZUI[GEN_B_IDX]%3==2));then
            reply=()
            -zui_glib_special_text "·Below are entries read from input·"
            separ
            local -a q0items=("$qitems[@]")
            qitems=($REPLY "$reply[1]" $REPLY "$q0inputp[@]")
            [[ -n ${qitems:|q0items} ]] && -zui_glib_fly_array_refresh 1
        fi
    fi
    # Input is a diff?
    ((!ZUI[GIT_DIFF]))&&[[ -n ${(M)qitems[1,15]:#*diff[[:space:]]##--git*} ]]&&iqopen_fill_or_set_view_git 1

    ((ZUI[VIEW_CHANGE]))||return 0
    iqopen_util_set_current_idx
    ZUI[VIEW_CHANGE]=0
    return 0
}

if (($+Opts[--refresh])); then
    iqw "Reload went OK, status normal"
    return 0
fi

## Start application ##
-zui_glib_msg "" "@@@ " "Welcome to " "NC System " "°open° console!" " @@@";
integer EC
iqopen_hub 1 1 1
while (( 1 )); do
    ZUI[VIEW_CHANGE]=1
    builtin print -rn -- $terminfo[smcup]$termcap[ti]
    zui-event-loop a:qitems
    builtin print -rn -- $terminfo[rmcup]$termcap[te]
    # exit?
    [[ -z $REPLY ]]&&break
    [[ $ZUI[SEARCH_BUFFER] != $~NC[WRONGSTR] ]]&&
        {iqopen_create_histories; builtin print $ZUI[SEARCH_BUFFER]>>!$NCSHIST;}

    local QFILE= REPLY_SAVE=$REPLY; integer QIDX=0
    # no search selection?
    # …from diff?
    if ((ZUI[GEN_B_IDX]%3==2));then
        if zui::get_diff_line "$__qlist[@]";then
            QIDX=$reply[1] QFILE=$reply[2]
        fi
    elif [[ -z $ZUI[SEARCH_BUFFER] ]];then
        # …from preview?
        if ((ZUI[GEN_B_IDX]%3==1));then
            QFILE=$ZUI[QPATH]
            QIDX=ZUI[USER_CURRENT_IDX]
            iqw "Opening " $QFILE " scrolled to line: " "#$QIDX"
        # …tree?
        elif ((ZUI[GEN_B_IDX]%3==0))&&[[ $REPLY_SAVE != *(·|–|—)* ]];then
            QFILE=$REPLY_SAVE
        fi
    # search selection?
    else
        # prepare the list var that's needed by -zui_sys_get_match_line
        repeat 1; do typeset +U -ga __slist=("$__qlist[@]");done
        if -zui_sys_get_match_line QIDX; then
            # preview?
            if ((ZUI[GEN_B_IDX]%3==1));then
                QFILE=$ZUI[QPATH]
                iqw "Opening " "${QFILE:-error ↔ not found}"\
                        " scrolled to line: " "#$QIDX"
            # or normal?
            elif ((ZUI[GEN_B_IDX]%3==0))&&[[ $REPLY_SAVE != *(·|–|—)* ]];then
                QFILE=$REPLY_SAVE
                QIDX=0
            fi
        fi
    fi
    if [[ -n $QFILE ]];then
        REPLY=
        if [[ -n $ANGEL_OPEN_CMD ]];then
            REPLY=$ANGEL_OPEN_CMD
        elif ! int/nc::get-editor;then
            EC+=$?
            iqw "" "" "" 'ERROR: Couldn''t find editor, tried '\
                "\$VISUAL (=$VISUAL) " then "" " \$EDITOR (=$EDITOR)"
            ZUI[IN_QUERY]=0
        fi
        [[ -n $REPLY ]]&&\
            (
                # Run the editor in $REPLY, first cd-ing into project's directory
                int/nc::run-command -C $PWD \
                    "$REPLY" ${${QIDX:#0##}:++$QIDX} -- $QFILE
            )
        EC+=$?
    fi
    builtin zcurses clear main redraw
    builtin zcurses clear status redraw
done

-zui_glib_cleanup serialize
builtin print -n $terminfo[rmcup]$termcap[te]
return 0
}
iqopen "$@"

# vim:ft=zsh:tw=80:sw=4:sts=4:et:foldmarker=[[[,]]]
