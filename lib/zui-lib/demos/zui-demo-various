#
# Started from Zle or from command line
#

# Cleanup $ZUI hash runtime data, deserialize previous state
-zui_glib_cleanup deserialize:"zui-demo-various"
# Initialize ZUI app
-zui_glib_init app:"zui-demo-various" app_name:"ZUI Large Demo"
emulate -LR zsh -o extendedglob -o typesetsilent -o warncreateglobal
-zui_glib_init2 # after emulate -LR

-zui-standard-text-select-callback() {
    -zui_util_strip_codes "$2"
    print -r -- "Obtained text selection: [$1] $REPLY" >> /tmp/zui.out
}

-zui_glib_store_default_app_config s:status_size "5"
-zui_glib_store_default_app_config s:log_append "above"
-zui_glib_store_default_app_config b:status_pointer 1
-zui_glib_store_default_app_config s:text_mode "off"
-zui_glib_store_default_app_config b:text_select 0
-zui_glib_store_default_app_config s:log_colors "white cyan red green cyan red magenta yellow blue"

# Settings are loaded only because they're altered on the fly
# Normally zui-list, zui-list-wrapper load configuration
-zui_glib_load_config b:bold 0 2 'ZUI[bold]'
-zui_glib_load_config s:text_mode "off" 2 'ZUI[text_mode]'
-zui_glib_load_config b:text_select 1 2 'ZUI[text_select]'
-zui_glib_load_config b:status_pointer 1 2 'ZUI[status_pointer]'
-zui_glib_load_config s:log_append "above" 2 'ZUI[log_append]'
-zui_glib_load_config b:status_border 0 2 'ZUI[status_border]'

##
## Variables (parameters)
##

local MATCH; local -i MBEGIN MEND
local -a match mbegin mend

# A variable that's initially empty,
# and generator 1 uses it as line
local mod1_ice1_extra_line mod2_ice1_extra_line

# A special parameter to be used in handlers
# that are to-eval code, not function names.
# By doing "internal=1" somewhere in the code
# the anchor, button will be configured as
# internal action.
local internal

##
## External Actions
##

-demo_mod1_external_action_1() {
    local id="$1" mod="$2" ice="$3"
    local var_name="mod${mod}_ice${ice}_extra_line"
    : ${(P)var_name::=Function set this line, regeneration used it}

    # Request regeneration with no user data
    reply=( ",mod${mod}_ice${ice}," "" )
}

##
## Internal actions
##

# Anchor internal action - data1 is index in time
# of creation of the anchor (it an be changed via
# on-the-fly updates submitted by glib function
# -zui_glib_submit_list_update)
-zui-standard-global-anchors-callback() {
    local id="$1" initial_line="$2" mod="$3" ice="$4"

    if [[ "$mod" = "1" ]]; then
        -zui_util_has_default_color && {
            # Can reveal transparency, if terminal
            # has background image or is transparent
            zcurses bg "status" "white/default"
            ZUI[status_colorpair]="white/default"
        }

        # This is internal zui-list variable,
        # accessible because internal actions
        # are called from within the list
        ZUI[bold]=1
    elif [[ "$mod" = "3" && "$ice" = "1" ]]; then
        mod3_internal_action "$id" "$mod" "$ice" "$initial_line" ""
    fi
}

mod3_internal_action() {
    local id="$1" mod="$2" ice="$3" data3="$4" data4=""

    # Line at generation time, and at run time,
    # after transformations of other modules
    # that could shift it up or down. {...:+...}
    # is: if not empty, then value is ...
    -zui_glib_fly_mod_regen "$mod" "$ice" ${data3:+"Extra line from top anchor (initial line: $data3, updated line: ${ZUI[zuianchor$id]})"}
}

##
## Other callbacks
##

# Optional, can be undefined.  It generates additional
# status text, displayed after "Current #...", mainly
# from data of highlighted button. How to just pass
# messages for display is shown in zui-demo-buttons.
-zui-standard-status-callback() {
    local tpe="$1" selectable="$2" uniq="$3" search="$4" line="$5" segment="$6"
    shift 6

    # No fast log messages
    [[ -n "$EPOCHREALTIME" ]] && (( EPOCHREALTIME - ${ZUI[my_prev_log_time]:-(${EPOCHREALTIME}-1)} < 0.14 )) && return 0
    ZUI[my_prev_log_time]="$EPOCHREALTIME"

    local pressed="${ZUI[pressed_now]#(zuiiaction|zuiaction|zuieanchor|zuianchor|zuitfield)}"
    [[ "$pressed" = log_append* ]] && pressed="LOG: ${(U)ZUI[log_append]} " || pressed="${pressed:+<<Pressed: $pressed>> }"

    # Zero-type means callback is called on a non-hyperlink
    if [[ "$tpe" = "0" ]]; then
        if [[ -n "${ZUI[pure_text_selected]}" ]]; then
            -zui_util_strip_codes "$segment"
            reply=( "$pressed" "Pure-text selected: " "$REPLY" )
        elif [[ -n "${ZUI[line_selected]}" ]]; then
            -zui_util_strip_codes "$line"
            reply=( "$pressed" "Line selected: " "$REPLY" )
        elif (( $selectable || $uniq || $search )); then
            # 1/0 selectable or not || 1/0 uniq mode || 1/0 non-empty search query
            # Any of those means no hops and no non-selectables are relevant
            -zui_util_strip_codes "$segment"
            reply=( "$pressed" "" "Text: " "$REPLY" )
        else
            # Detect if current line is also a hop
            local on_hop
            if [[ "${(t)ZUILIST_HOP_INDICES}" = array* && -n "${ZUILIST_HOP_INDICES[(r)${ZUI[CURRENT_IDX]}]}" ]]; then
                on_hop=", also a hop"
            fi

            reply=( "$pressed" )
            [[ -z "$pressed" ]] && reply+=( "(A non-selectable line$on_hop)" )
        fi

        # Resulting type: 1 - log message
        return 1
    else
        # No message on text field input
        [[ -z "${ZUI[pressed_now]}" && -n "${ZUI[current_tfield]}" ]] && return 0

        [[ "$1" = *(tfield|lbox)* ]] && local id="$1" width="$2" index="$3" text="$4" data1="$5" data2="$6" data3="$7" ||
                                        local id="$1" data1="$2" data2="$3" data3="$4" data4="$5"

        [[ $id = (zuiiaction|zuianchor|zuitfield|zuilbox)* ]] && local exint="NO-RESTART" || local exint="RESTART"
        [[ $id = (zuianchor|zuieanchor)* ]] && local aindex="Index: $data1"
        # A raw link? (i.e. no handler and no dynamic function)
        [[ $id != (zuiaction|zuiiaction|zuianchor|zuieanchor|zuitfield|zuilbox)* ]] && exint+=" <raw link>"

        id="${id#(zuiaction|zuiiaction|zuianchor|zuieanchor|zuitfield|zuilbox)}"

        handler="$ZUI[zuiiaction$id]"
        [[ -z "$handler" ]] && handler="${ZUI[zuiaction$id]}"
        [[ -z "$handler" ]] && handler="${ZUI[zuitfield$id]}"
        [[ -z "$handler" ]] && handler="${ZUI[zuilbox$id]}"

        reply=( "$pressed" )
        [[ -z "$pressed" ]] && reply+=( "Id: $id" "${aindex+ $aindex}" " $exint" " Handler:" " $handler" )

        # Resulting type: 1 - log message
        return 1
    fi
}

##
## Generators for modules
##

# Generator for module 1
demo_generator_A() {
    local mod="$1" ice="$2" user_data=${3:+ \[Obtained regeneration user data: $3\]}

    reply=( )
    # To request regeneration via external anchor (it will jump to given line,
    # and also regenerate the given modules) or via raw link (button with no
    # handler, so it is external) pass sequence of ",modX_iceY," strings as
    # penultimate, and user-data as last argument.
    -zui_glib_anchor "regenerateA_$mod" "1" "" ",mod1_ice1," "$RANDOM" "[${ZUI[MAGENTA]}Regenerate${ZUI[FMT_END]}]"
    -zui_glib_rc_button_ext "regenerateB_$mod" "$mod" "$ice" "" "" "${ZUI[MAGENTA]}Regenerate${ZUI[FMT_END]}" -demo_mod1_external_action_1
    -zui_glib_rc_button_ext "regenerateC_$mod" "" "" ",mod2_ice1," "" "${ZUI[MAGENTA]}Regenerate${ZUI[FMT_END]}"

    # Content
    reply=(
            "Restart-regeneration module (this is a non-selectable line, a header)"
            "${reply[1]} this module via ${ZUI[YELLOW]}list_restart${ZUI[FMT_END]} and ${ZUI[CYAN]}external_anchor${ZUI[FMT_END]}${user_data}"
            "${reply[2]} this module via ${ZUI[YELLOW]}list_restart${ZUI[FMT_END]} and ${ZUI[CYAN]}function_call${ZUI[FMT_END]}"
            "${reply[3]} the <NEXT> module via ${ZUI[YELLOW]}list_restart${ZUI[FMT_END]} and ${ZUI[CYAN]}raw_link${ZUI[FMT_END]}"
            "Random number: $RANDOM"

            # This is set in -demo_mod1_external_action_1
            $mod1_ice1_extra_line
            )

    # Jump 2 lines after last line. Note that
    # the line index is written as:
    # - maximum local line number
    # - remaining lines to reach next module
    local -a next
    -zui_glib_anchor "jumpA_$mod" "${#reply}+3" "" "" "" "[${ZUI[YELLOW]}NEXT${ZUI[FMT_END]}]" "" next
    reply[4]="${reply[4]/<NEXT>/${next[1]}}"

    # Non-selectables (:+ is "if not empty, then...")
    reply2=( 1 5 ${mod1_ice1_extra_line:+${#reply}} )
    # Hops
    reply3=( 1 )
    # Local anchors
    reply4=( regenerateA_$mod jumpA_$mod )
}

demo_generator_B() {
    local mod="$1" ice="$2"

    # Prepare toggle button's states. Every expression
    # in first string will be evaluated and mapped as
    # boolean to corresponding variable in second string,
    # using bool true - $3, bool false - $4.
    local col_bld col_tmd col_tsel col_lap col_sptr col_sb
    -zui_util_map_bools "ZUI[bold];ZUI[text_select];[[ \"${ZUI[log_append]}\" = below ]];ZUI[status_pointer];ZUI[status_border]" \
                          "col_bld;col_tsel;col_lap;col_sptr;col_sb" "${ZUI[BG_BLUE]}" "${ZUI[GREEN]}"

    reply=( )
    # internal=1 is a trick to make action internal
    -zui_glib_rc_button "bold_$mod" "${col_bld}bold${ZUI[FMT_END]}" 'internal=1; (( ZUI[bold]=1-ZUI[bold] )); -zui_glib_fly_mod_regen "'"$mod"'" "'"$ice"'"'
    -zui_glib_rc_button "text_select_$mod" "${col_tsel}text_select${ZUI[FMT_END]}" 'internal=1; (( ZUI[text_select]=1-ZUI[text_select] )); -zui_glib_fly_mod_regen "'"$mod"'" "'"$ice"'"'
    -zui_glib_rc_button "log_append_$mod" "${col_lap}log_append${ZUI[FMT_END]}" 'internal=1; [[ ${ZUI[log_append]} = "below" ]] && ZUI[log_append]=above || ZUI[log_append]=below; -zui_glib_fly_mod_regen "'"$mod"'" "'"$ice"'"'
    -zui_glib_rc_button "status_pointer_$mod" "${col_sptr}status_pointer${ZUI[FMT_END]}" 'internal=1; (( ZUI[status_pointer]=1-ZUI[status_pointer] )); -zui_glib_fly_mod_regen "'"$mod"'" "'"$ice"'"'
    -zui_glib_rc_button "status_border_$mod" "${col_sb}status_border${ZUI[FMT_END]}" 'internal=1; (( ZUI[status_border]=1-ZUI[status_border] )); -zui_glib_fly_mod_regen "'"$mod"'" "'"$ice"'"'
    -zui_glib_rc_button "log_colors_$mod" "${ZUI[GREEN]}log_colors${ZUI[FMT_END]}" 'internal=1; zui_log_colors=( $zui_log_colors[-1] ${(@)zui_log_colors[1,-2]} )'

    # Variables of the list box
    (( ${+ZUI[my_lbox1_width]} == 0 )) && ZUI[my_lbox1_width]=5
    (( ${+ZUI[my_lbox1_idx]} == 0 )) && ZUI[my_lbox1_idx]=1
    (( ${+ZUI[my_lbox1_opts]} == 0 )) && ZUI[my_lbox1_opts]="off;hyp;nohyp;all"
    noglob -zui_glib_list_box "lbox1_$mod" ZUI[my_lbox1_width] ZUI[my_lbox1_idx] ZUI[my_lbox1_opts] "" "" "" 'ZUI[text_mode]=${${(s:;:)ZUI[my_lbox1_opts]}[${ZUI[my_lbox1_idx]}]}'

    # Don't overwrite user changes
    (( ${+ZUI[my_tfield1_width]} == 0 )) && ZUI[my_tfield1_width]=20
    (( ${+ZUI[my_tfield1_start]} == 0 )) && ZUI[my_tfield1_start]=4
    (( ${+ZUI[my_tfield1_data]} == 0 )) && ZUI[my_tfield1_data]="An example text"
    noglob -zui_glib_text_field "tfield1_$mod" ZUI[my_tfield1_width] ZUI[my_tfield1_start] ZUI[my_tfield1_data] "" "" "" 'mod2_ice1_extra_line="Received text (with no restart): ${ZUI[CYAN]}${ZUI[my_tfield1_data]}${ZUI[FMT_END]}"; -zui_glib_fly_mod_regen "'"$mod"'" "'"$ice"'"'

    (( ${+ZUI[my_tfield2_width]} == 0 )) && ZUI[my_tfield2_width]=40
    (( ${+ZUI[my_tfield2_start]} == 0 )) && ZUI[my_tfield2_start]=1
    (( ${+ZUI[my_tfield2_data]} == 0 )) && ZUI[my_tfield2_data]="I'm wider and start at the beginning"
    noglob -zui_glib_text_field "tfield2_$mod" ZUI[my_tfield2_width] ZUI[my_tfield2_start] ZUI[my_tfield2_data] "" "" "" 'mod2_ice1_extra_line="Received 2nd text (with no restart): ${ZUI[CYAN]}${ZUI[my_tfield2_data]}${ZUI[FMT_END]}"; -zui_glib_fly_mod_regen "'"$mod"'" "'"$ice"'"'

    # Content
    reply=(
            "Toggle ${reply[1]} with inlined (no function!) code, text mode: <${reply[7]}>, ${reply[2]}"
            "Toggle ${reply[3]} - status logs appended at end, or at top, rotate ${reply[6]}"
            "Toggle ${reply[4]} - status position pointer, ${reply[5]}"
            "Random number: $RANDOM"
            "Enter text! |${reply[8]}|, try keys UP/DOWN, [${reply[9]}]"

            $mod2_ice1_extra_line
    )

    # Non-selectables                               Hops            Local anchors   # Spacing
    reply2=( 4 ${mod2_ice1_extra_line:+6} )         reply3=( 1 )    reply4=( )      reply5=2
}

# Generator for module 2
demo_generator_C() {
    local mod="$1" ice="$2" extra_line="$3"

    # Optional lines
    local regenerate jump append_third

    local rand_line="Random number: $RANDOM"
    integer rand_line_nr=2

    # 1st instance?
    if [[ "$ice" = "1" ]]; then
        reply=( )
        # IDs of anchors have own namespace
        -zui_glib_rc_button_ext "regenerateD_${mod}_${ice}" "$mod" "$ice" "" "" "${ZUI[BOLD]}${ZUI[BLUE]}Regenerate${ZUI[FMT_END]}" mod3_internal_action
        -zui_glib_anchor "jumpB_${mod}_${ice}" "1" "" "" "" "[${ZUI[YELLOW]}Jump${ZUI[FMT_END]}]"
        regenerate="${reply[1]} this module ${ZUI[RED]}ON-THE-FLY${ZUI[FMT_END]}, ${ZUI[YELLOW]}without${ZUI[FMT_END]} list restart"
        jump="${reply[2]} to 1st line"
        rand_line="Random number: ${ZUI[YELLOW]}$RANDOM${ZUI[FMT_END]}"
        rand_line_nr=4
    fi

    -zui_glib_get_mod_factor "$mod"

    # 2nd instance? Also, is it last instance?
    if [[ "$ice" = "2" && "$REPLY" = "2" ]]; then
        reply=( )
        -zui_glib_anchor "append_third_${mod}_${ice}" "2+2" "" ",mod${mod}_ice${ice},mod${mod}_ice$(( ice + 1 ))," "" "${ZUI[MAGENTA]}Append third!${ZUI[FMT_END]}" "-zui_glib_set_mod_factor $mod 3"
        append_third="${reply[1]}"
    fi

    # Content
    reply=(
        "Module 3, instance ${ZUI[CYAN]}#$ice${ZUI[FMT_END]}"
        $regenerate
        $jump
        "$rand_line"
        $extra_line
        $append_third
    )

    # Non-selectables          Hops              Local anchors (:+ - replace if not null)
    # 1 is omitted
    reply2=( $rand_line_nr )   reply3=( 1 )      reply4=( ${jump:+jumpB_${mod}_${ice}} ${append_third:+append_third_${mod}_${ice}} )
}

##
## Start application
##

# Pass configuration altered on-the-fly
# so that it's not overwritten at restart
zui-event-loop 1:demo_generator_A 1:demo_generator_B 2:demo_generator_C \
                 cfg-refresh:bold,text_mode,text_select,status_pointer,log_append,status_border

# Cleanup $ZUI hash runtime data
-zui_glib_cleanup serialize

return 0

# vim:ft=zsh
