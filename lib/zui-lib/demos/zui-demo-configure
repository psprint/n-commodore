# Started from Zle or from command line

-zui_glib_cleanup deserialize:"zui-demo-configure"
-zui_glib_init app:"zui-demo-configure" app_name:"ZUI Configure/Make wrapper"
emulate -LR zsh -o extendedglob -o typesetsilent -o warncreateglobal
-zui_glib_init2 # after emulate -LR

-zui_glib_store_default_app_config s:timeout 300
-zui_glib_store_default_app_config s:text_mode off

local -a coproc_output
local cstarted=0 mstarted=0  # denote if configure/make is running

demo_generator_A() {
    local mod="$1" ice="$2"

    reply=()
    -zui_glib_rc_button "button1" "${ZUI[MAGENTA]}Run configure${ZUI[FMT_END]}" 'internal=1; coproc 2>&1 ./configure; cstarted=1'
    -zui_glib_rc_button "button2" "${ZUI[MAGENTA]}Get CFLAGS${ZUI[FMT_END]}" 'internal=1; get_cflags'
    -zui_glib_rc_button "button3" "${ZUI[MAGENTA]}Run make${ZUI[FMT_END]}" 'internal=1; coproc 2>&1 make; mstarted=1'

    # Content
    reply=( "${reply[1]} ${reply[2]} ${reply[3]}" )

    # Non-selectable lines  Hops to jump with [ and ]   Local anchors
    reply2=( )              reply3=( 1 )                reply4=( )
}

demo_generator_B() {
    reply=()
    -zui_glib_special_text "Configure/Make output"
    -zui_glib_button "button4" "${ZUI[MAGENTA]}(clear)${ZUI[FMT_END]}" 'internal=1; coproc_output=( ); -zui_glib_fly_mod_regen 2 1'
    reply=( "${ZUI[YELLOW]}${reply[1]}${ZUI[FMT_END]} ${reply[2]}" "${coproc_output[@]}" )  reply2=( )  reply3=( 1 )  reply4=( )
}

# Read & publish configure/make output
-zui-standard-timeout-callback() {
    (( mstarted + cstarted == 0 )) && return

    local line had_read=0
    repeat 20; do
        read -r -p -t 0 line 2>/dev/null && { had_read=1; coproc_output+=( "$line" ); } || break
    done

    (( had_read )) && -zui_glib_fly_mod_regen 2 1
    (( mstarted != 0 && had_read == 0 )) && [[ "${jobtexts[*]}" != *make* ]] && { ZUI[redraw]=1; mstarted=0; -zui_glib_msg "Message: " "make ended"; }
    (( cstarted != 0 && had_read == 0 )) && [[ "${jobtexts[*]}" != *configure* ]] && { ZUI[redraw]=1; cstarted=0; -zui_glib_msg "Message: " "configure ended"; }
}

get_cflags() {
    local CFLAGS=`grep '^CFLAGS[[:space:]]*=' Makefile`
    -zui_glib_msg "Obtained: " "CFLAGS = ${CFLAGS#*=[[:space:]]##}"
    return 1
}

## Start application ##
zui-event-loop 1:demo_generator_A 1:demo_generator_B

-zui_glib_cleanup serialize

return 0

# vim:ft=zsh
