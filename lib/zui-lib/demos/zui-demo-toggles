# Started from Zle or from command line

-zui_glib_cleanup deserialize:"zui-demo-toggles"
-zui_glib_init app:"zui-demo-toggles" app_name:"ZUI Toggle Buttons"
emulate -LR zsh -o extendedglob -o typesetsilent -o warncreateglobal
-zui_glib_init2 # after emulate -LR

-zui_glib_store_default_app_config s:text_mode off

local internal  # trick variable to make a handler no-restart

# Generator for module 1
demo_generator_A() {
    local mod="$1" ice="$2"

    local dat1 col2 col3
    -zui_util_map_bools "ZUI[my_toggle1]" "dat1" "x" " "
    -zui_util_map_bools "ZUI[my_toggle2];ZUI[my_toggle3]" "col2;col3" "${ZUI[BG_GREEN]}" "${ZUI[GREEN]}"

    reply=()
    -zui_glib_button "toggle1"  "[${dat1}] Checkbox" '(( ZUI[my_toggle1]=1-ZUI[my_toggle1] )); -zui_glib_fly_mod_regen 1 1; internal=1'
    -zui_glib_rc_button "toggle2"  "${col2}Toggle 1${ZUI[FMT_END]}" '(( ZUI[my_toggle2]=1-ZUI[my_toggle2] )); -zui_glib_fly_mod_regen 1 1; internal=1'
    -zui_glib_rc_button "toggle3"  "${col3}Toggle 2${ZUI[FMT_END]}" '(( ZUI[my_toggle3]=1-ZUI[my_toggle3] )); -zui_glib_fly_mod_regen 1 1; internal=1'

    # Content
    reply=( "${reply[1]}" "${reply[2]} ${reply[3]}" )

    # Non-selectable lines  Hops to jump with [ and ]   Local anchors
    reply2=( )            reply3=( 1 )                reply4=( )
}

# Show handler code in status window
-zui-standard-status-callback() {
    local tpe="$1" selectable="$2" uniq="$3" search="$4" line="$5" segment="$6"
    [[ "$tpe" = "0" ]] && return 0 # Filter out non-hyperlinks

    shift 6; local id="$1" data1="$2" data2="$3" data3="$4" data4="$5"
    id="${id#(zuiiaction|zuiaction|zuicheckbox|zuieanchor|zuianchor|zuitfield)}"
    handler="${ZUI[zuiiaction$id]}"
    [[ "$id" = "toggle1" ]] && reply=( "" "" "Handler: " "$handler" ) || reply=( "Handler: " "$handler" )

    # Resulting type: 1 - log message
    return 1
}

## Start application ##
zui-event-loop 1:demo_generator_A

-zui_glib_cleanup serialize

return 0

# vim:ft=zsh
