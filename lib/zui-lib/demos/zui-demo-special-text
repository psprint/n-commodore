# Started from Zle or from command line
#
# Shows how to embed a text with special characters

-zui_glib_cleanup deserialize:"zui-demo-buttons"
-zui_glib_init app:"zui-demo-buttons" app_name:"ZUI Buttons"
emulate -LR zsh -o extendedglob -o typesetsilent -o warncreateglobal
-zui_glib_init2 # after emulate -LR

-zui_glib_store_default_app_config b:text_select 1

local internal  # trick variable to make a handler no-restart

demo_generator_A() {
    local mod="$1" ice="$2" arg="$3"

    reply=()
    -zui_glib_special_text "Here's"
    -zui_glib_rc_button "button1" "${ZUI[MAGENTA]}button1${ZUI[FMT_END]}" 'internal=1; -zui_glib_msg "Button 1 pressed"'
    -zui_glib_rc_button "button2" "${ZUI[MAGENTA]}button2${ZUI[FMT_END]}" 'internal=1; -zui_glib_msg "Button 2 pressed"'

    reply=( "BROKEN: Here's special text, ${reply[2]} and ${reply[3]}"
            "CORRECT: ${reply[1]} special text, ${reply[2]} and ${reply[3]}" )

    # Non-selectable lines  Hops to jump with [ and ]   Local anchors
    reply2=( )              reply3=( 1 )                reply4=( )
}

-zui-standard-status-callback() {
    [[ -n "${ZUI[pure_text_selected]}" ]] && {
        REPLY="${ZUI[pure_text_selected]}"
        -zui_glib_get_stext "$REPLY"  # no change to REPLY if no special text
        reply=( "Text: " "$REPLY" )
        return 1
    }
    return 0  # no message
}

## Start application ##
zui-event-loop 1:demo_generator_A

-zui_glib_cleanup serialize

return 0

# vim:ft=zsh
