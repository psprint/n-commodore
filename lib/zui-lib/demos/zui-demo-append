# Started from Zle or from command line
#
# A demo showing how to add module instances to already generated document

-zui_glib_cleanup deserialize:"zui-demo-append"
-zui_glib_init app:"zui-demo-append" app_name:"ZUI On-The-Fly Append"
emulate -LR zsh -o extendedglob -o typesetsilent -o warncreateglobal
-zui_glib_init2 # after emulate -LR

-zui_glib_store_default_app_config b:border 1
-zui_glib_store_default_app_config b:status_border 1
-zui_glib_store_default_app_config s:text_mode off

# Generator for module 1
demo_generator_A() {
    local mod="$1" ice="$2"

    # Anchor only in last instance
    -zui_glib_get_mod_factor "$mod"
    if [[ "$ice" = "$REPLY" ]]; then
        # 1+2 - from 1st line of this module, jump 2 beyond this module
        # Regenerate $mod/$ice, and $mod/$ice+1, first running handler
        local -a output
        -zui_glib_anchor "append_next" "1+2" "" ",mod${mod}_ice${ice},mod${mod}_ice$(( ice + 1 ))," "" "${ZUI[MAGENTA]}Append next!${ZUI[FMT_END]}" "-zui_glib_set_mod_factor $mod $(( REPLY + 1 ))" output
    fi

    # Content
    reply=( "This is module $mod, instance $ice" ${output[1]} )

    # Non-selectable lines  Hops to jump with [ and ]   Local anchors (if output[1] not empty ...)
    reply2=( 1 )            reply3=( 1 )                reply4=( ${output[1]:+append_next} )
}

## Start application ##
zui-event-loop 2:demo_generator_A

-zui_glib_cleanup serialize

return 0

# vim:ft=zsh
