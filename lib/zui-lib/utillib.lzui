#!/usr/bin/env zsh
#
# Library file (*.lzui)
#
# Utility functions
#

ZUI[utillib_sourced]="1"

function zui::bindkey() {
    builtin emulate -L zsh -o extendedglob
    local QSEQ=$1
    shift
    ZUI[bindkey_$QSEQ]=$*
    [[ -n $QSEQ ]]
}

# FUNCTION: -zui_util_map_bools {{{
# Maps boolean values of expressions given in $1
# (string separated by ';') to parameters given
# via names in $2 (separated by ';'). For true,
# $3 is assigned to corresponding parameter, $4
# for false.
#
# If $1 contains [[ or ((, it is evaluated. If
# it is a positive number or zero, then it is
# treated as direct bool value. Otherwise it's
# treated as parameter name, and boolean value
# of the parameter (it has to be positive number
# or zero) is examined.
#
# -zui_util_map_bools "1;[[ a = b ]];ZUI[text_select]" \
#                       "color1;color2;color3" $red $white
#
function -zui_util_map_bools() {
    local __exp="$1" __pm="$2" __tre="$3" __fse="$4"

    local -a __exps __pms
    __exps=( "${(@s:;:)__exp}" )
    __pms=( "${(@s:;:)__pm}" )

    integer __index __size=${#__pms}
    for (( __index=1; __index <= __size; ++ __index )); do
        __exp="${__exps[__index]}"
        __pm="${__pms[__index]}"
        [[ -z "${__exp##[[:space:]]##}" || -z "${__pm##[[:space:]]##}" ]] && continue
        if [[ "$__exp" = <-> ]] then
            (( $__exp )) && : ${(P)__pm::=$__tre} || : ${(P)__pm::=$__fse}
        elif [[ "$__exp" != *\[\[* && "$__exp" != *\(\(* ]]; then
            [[ "${(P)__exp}" != <-> || "${(P)__exp}" = 0## ]] && : ${(P)__pm::=$__fse} || : ${(P)__pm::=$__tre}
        else
            eval "$__exp" && : ${(P)__pm::=$__tre} || : ${(P)__pm::=$__fse}
        fi
    done
} # }}}

# FUNCTION: -zui_util_strip_codes {{{
# Strips formatting codes from text in
# $1, saves result into parameter REPLY
#
# $1 - text to strip codes from
function -zui_util_strip_codes() {
    REPLY="${1//[$'\03'-$'\07'$'\013'-$'\014'$'\016'-$'\031'$'\037']/}"
} # }}}

# FUNCTION: -zui_util_get_segment {{{
# Return n-th (z) segment of given text
# $1 - text
# $2 - segment (default is 1)
# $3 - destination variable name (default is "REPLY")
#
# Can use e.g. 'reply[1]' for $3
function -zui_util_get_segment() {
    local -a segs
    segs=( "${(z@)1}" )
    local varname="${3:-REPLY}"
    local index="${2:-1}"
    : ${(P)varname::=${segs[index]}}
} # }}}

# FUNCTION: -zui_util_get_time {{{
#
# Returns time %H:%M, via datetime or `date` as fallback
#
function -zui_util_get_time() {
    local ts
    ts="$EPOCHSECONDS"
    [[ -z "$ts" || "$ts" = "0" ]] && REPLY="$(date '+%H:%M')" || strftime -s REPLY '%H:%M' "$ts"
} # }}}

# FUNCTION: -zui_util_get_datetime {{{
# Returns date and time. Uses datetime zsh module
# or date command as fallback.
#
# $REPLY - date and time string "Ymd_H.M.S"
#
function -zui_util_get_datetime() {
    local ts
    ts="$EPOCHSECONDS"
    [[ -z "$ts" || "$ts" = "0" ]] && REPLY="$(date '+%Y%m%d_%H.%M.%S')" || strftime -s REPLY '%Y%m%d_%H.%M.%S' "$ts"
} # }}}

# FUNCTION: -zui_util_get_timestamp {{{
# Returns timestamp, via datetime or `date` as fallback
#
function -zui_util_get_timestamp() {
    REPLY="$EPOCHSECONDS"
    [[ -z "$REPLY" ]] && REPLY="$(date +%s)"
} # }}}

# FUNCTION: -zui_util_has_default_color {{{
# Returns true if the "default" color
# can be used with current Zsh/zcurses
function -zui_util_has_default_color() {
    (( ${+zcurses_colors} )) || return 2
    [[ -z "${zcurses_colors[(r)default]}" ]] && return 1
    autoload is-at-least
    is-at-least 2>/dev/null 5.3 && return 0
    return 1
} # }}}

# FUNCTION: -zui_util_resolve_path {{{
# Resolves absolute path from current working directory and file path
#
# $1 - current working directory
#
# $2 - file path
#
# $reply[1] - dirname
#
# $reply[2] - basename
#
function -zui_util_resolve_path() {
    local dirpath="$1" filepath="$2"

    local dirpath2="${dirpath/#\~/$HOME}"
    # :a behaves weird, prepends paths, which are not CWD
    [ "${dirpath2[1]}" = "/" ] && dirpath2="${dirpath2:a}"
    local filepath2="${filepath/#\~/$HOME}"
    [ "${filepath2[1]}" = "/" ] && filepath2="${filepath2:a}"

    reply=()
    if [ "${filepath2[1]}" = "/" ]; then
        reply[1]="${filepath2:h}"
        reply[2]="${filepath2:t}"
    else
        local p="$dirpath2/$filepath2"
        [ "${p[1]}" = "/" ] && p="${p:a}"
        reply[1]="${p:h}"
        reply[2]="${p:t}"
    fi
} # }}}

# FUNCTION: -zui_util_to_cmd_line {{{
# Puts given text on command line - regardless
# if Zle is active or not
#
# $1 - text to put on command line
#
function -zui_util_to_cmd_line() {
    if zle; then
        zle .kill-buffer
        BUFFER="$1"
        zle .redisplay
        zle .beginning-of-line
    else
        print -zr "$1"
    fi
} # }}}

# FUNCTION: -zui_util_circular_next {{{
# Returns next file to write to in circular buffer set
# of file names <base>.1 <base>.2 ... <base>.<size>
#
# The buffer is ordered according to modification time.
#
# $1 - base of file names in circular buffer
# $2 - maximum number of files in circular buffer
#
function -zui_util_circular_next() {
    setopt localoptions extendedglob

    # Input data
    local base="$1" count="$2"

    # Circular buffers' directory
    local circpath="$ZUI_CONFIG_DIR/var/circular_buffers"
    [[ ! -d "$circpath" ]] && command mkdir -p "$circpath"

    local -a circular_buffer
    circular_buffer=( "$circpath"/"$base".[[:digit:]]##(OmN) )

    if [[ "$count" -gt "${#circular_buffer}" ]]; then
        integer next_index=$(( ${#circular_buffer} + 1 ))
        REPLY="$circpath/${base}.${next_index}"
    else
        REPLY="${circular_buffer[1]}"
    fi

    return 0
} # }}}

# FUNCTION: -zui_util_circular_paths {{{
#
# Returns absolute file paths of given circular buffer.
# They are ordered from most recent to least recent.
#
# No count is obtained, so all files are returned, even
# actually disabled by buffer limit.
#
# $1 - name of the circular buffer
#
function -zui_util_circular_paths() {
    setopt localoptions extendedglob

    # Input data
    local base="$1"

    # Output array
    reply=( )

    # Circular buffers' directory
    local circpath="$ZUI_CONFIG_DIR/var/circular_buffers"
    [[ ! -d "$circpath" ]] && return 1

    reply=( "$circpath"/"$base".[[:digit:]]##(omN) )
} # }}}

# FUNCTION: -zui_util_to_cmd_line {{{
# Puts given text on command line â€“ regardless if Zle is active or not
#
# $1 - text to put on command line
#
function -zui_util_to_cmd_line() {
    if zle; then
        zle .kill-buffer
        BUFFER="$1"
        zle .redisplay
        zle .beginning-of-line
    else
        print -zr "$1"
    fi
} # }}}

# vim:ft=zsh
